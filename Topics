Clean and Modular code.
Refactoring code
Writing clean code
Writing Modular code
Efficient code
Optimizing
Documentation
Inline comments
Docstrings
Project Documentation
Version control in Data Science
Model Versionning.
Conclusion.


QUIZ QUESTION
Imagine you are writing a program that executes a number of tasks and categorizes each task based on its execution time. 
Below is a small snippet of this program. Which of the following naming changes could make this code cleaner? There may be more than one correct answer.

t = end_time - start  # compute execution time
c = category(t)  # get category of task
print('Task Duration: {} seconds, Category: {}'.format(t, c)


execution_time = end_time - start_time
category = categorize_task(execution_time)
print('Task Duration: {} seconds, Category: {}'.format(execution_time, category)

The second block is much cleaner.

Quiz: Buying stocks
Imagine you analyzed several stocks and calculated the ideal price, or limit price, at which you'd want to buy each stock. 
You write a program to iterate through your stocks and buy it if the current price is below or equal to the limit price you computed. 
Otherwise, you put it on a watchlist. Below are three ways of writing this code. Which of the following is the most clean?

# Choice A
stock_limit_prices = {'LUX': 62.48, 'AAPL': 127.67, 'NVDA': 161.24}
for stock_ticker, stock_limit_price in buy_prices.items():
    if stock_limit_price <= get_current_stock_price(ticker):
        buy_stock(ticker)
    else:
        watchlist_stock(ticker)
# Choice B
prices = {'LUX': 62.48, 'AAPL': 127.67, 'NVDA': 161.24}
for ticker, price in prices.items():
    if price <= current_price(ticker):
        buy(ticker)
    else:
        watchlist(ticker)
# Choice C
limit_prices = {'LUX': 62.48, 'AAPL': 127.67, 'NVDA': 161.24}
for ticker, limit in limit_prices.items():
    if limit <= get_current_price(ticker):
        buy(ticker)
    else:
        watchlist(ticker)
        
 # spoiler alert, its choice C.
 
 
